# Интернет-магазин шин и дисков
## Оглавление
1. [Технологический стек](#-технологический-стек)
2. [Архитектура системы](#-архитектура-системы)
3. [Ролевая модель](#-ролевая-модель)
4. [Быстрый запуск](#-быстрый-запуск)
5. [Детальная инструкция по запуску](#-детальная-инструкция-по-запуску)
6. [Доступ к приложению](#-доступ-к-приложению)
7. [Управление контейнерами](#-управление-контейнерами)
8. [Тестовые пользователи](#-тестовые-пользователи)

## Технологический стек

### Бэкенд
- **Python 3.9** с FastAPI - высокопроизводительный веб-фреймворк
- **PostgreSQL 13** - реляционная база данных
- **SQLAlchemy** - ORM для работы с БД
- **JWT** - аутентификация через токены
- **bcrypt** - хэширование паролей

### Фронтенд
- **React 18** - пользовательский интерфейс
- **Axios** - HTTP-клиент для API
- **React Router** - навигация между страницами
- **Nginx** - веб-сервер для статических файлов

### Инфраструктура
- **Docker** - контейнеризация приложений
- **Docker Compose** - оркестрация контейнеров
- **Git** - контроль версий

## Архитектура системы


### Микросервисная структура
- **frontend** - клиентское React-приложение
- **backend** - FastAPI RESTful API сервер
- **db** - PostgreSQL база данных

### API Endpoints
- `GET /products` - получение списка товаров
- `POST /orders` - создание заказа
- `POST /token` - аутентификация пользователя
- `GET /users/me` - информация о текущем пользователе

## Ролевая модель

### Администратор (admin)
- **Полный доступ** ко всем функциям системы
- Управление пользователями и правами доступа
- Просмотр всех заказов и статистики
- Редактирование товаров и категорий

### Менеджер (manager)
- Управление товарами и заказами
- Просмотр и обработка заказов
- Обновление информации о товарах
- Отсутствует доступ к управлению пользователями

### Пользователь (user)
- Просмотр каталога товаров
- Добавление товаров в корзину
- Оформление заказов
- Просмотр истории своих заказов

## Быстрый запуск

### Команды быстрого запуска
```bash
# Клонирование репозитория (если необходимо)
git clone <URL_репозитория>
cd <директория_проекта>

# Запуск всех сервисов
docker-compose up -d --build

# Проверка статуса
docker-compose ps

# Получение URL для доступа
echo "Сайт доступен по адресу: http://$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' repo-frontend-1):3000"



############ Для запуска


docker-compose up -d --build

docker-compose up -d --build && echo "Сайт доступен по адресу: http://$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' repo-frontend-1)"

